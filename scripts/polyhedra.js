
var PolyhedraManager = (function () {
    function PolyhedraManager() {
    }

    PolyhedraManager.prototype.generate = function (solid, uvmapping) {
        var solidParams = this.solids[solid];
        var vertexes = solidParams[0],
            topology = solidParams[1],
            defaultSize = solidParams[2] || 0;
        var uvMappingFn = this.uvMappingFns[uvmapping || 'spherical'];

        var sqrt = Math.sqrt;
        var colors = this.colors;
        var data = [];
        var numVertices = 0;

        for (var t = 0; t < topology.length; ) {
            var polySize = defaultSize;
            if (!defaultSize) {
                polySize = topology[t];
                t += 1;
            }

            var ax = vertexes[topology[t + 0] * 3 + 0],
                ay = vertexes[topology[t + 0] * 3 + 1],
                az = vertexes[topology[t + 0] * 3 + 2];
            length = 1 / sqrt(ax * ax + ay * ay + az * az);
            ax *= length;
            ay *= length;
            az *= length;
            var auv = uvMappingFn(ax, ay, az);

            var bx = vertexes[topology[t + 1] * 3 + 0],
                by = vertexes[topology[t + 1] * 3 + 1],
                bz = vertexes[topology[t + 1] * 3 + 2];
            length = 1 / sqrt(bx * bx + by * by + bz * bz);
            bx *= length;
            by *= length;
            bz *= length;
            var buv = uvMappingFn(bx, by, bz);

            var cx = vertexes[topology[t + 2] * 3 + 0],
                cy = vertexes[topology[t + 2] * 3 + 1],
                cz = vertexes[topology[t + 2] * 3 + 2];
            length = 1 / sqrt(cx * cx + cy * cy + cz * cz);
            cx *= length;
            cy *= length;
            cz *= length;
            var cuv = uvMappingFn(cx, cy, cz);

            var abx = bx - ax, aby = by - ay, abz = bz - az;
            var acx = cx - ax, acy = cy - ay, acz = cz - az;
            var nx = acy * abz - aby * acz,
                ny = acz * abx - abz * acx,
                nz = acx * aby - abx * acy;

            var color = colors[polySize % colors.length];
            var r = color[0], g = color[1], b = color[2], a = color[3];

            data.push(
                ax, ay, az, nx, ny, nz, r, g, b, a, auv[0], auv[1],
                cx, cy, cz, nx, ny, nz, r, g, b, a, cuv[0], cuv[1],
                bx, by, bz, nx, ny, nz, r, g, b, a, buv[0], buv[1]
            );
            numVertices += 3;

            for (var tn = 3; tn < polySize; tn += 1) {
                bx = cx;
                by = cy;
                bz = cz;
                buv = cuv;

                cx = vertexes[topology[t + tn] * 3 + 0],
                cy = vertexes[topology[t + tn] * 3 + 1],
                cz = vertexes[topology[t + tn] * 3 + 2];
                length = 1 / sqrt(cx * cx + cy * cy + cz * cz);
                cx *= length;
                cy *= length;
                cz *= length;
                cuv = uvMappingFn(cx, cy, cz);

                data.push(
                    ax, ay, az, nx, ny, nz, r, g, b, a, auv[0], auv[1],
                    cx, cy, cz, nx, ny, nz, r, g, b, a, cuv[0], cuv[1],
                    bx, by, bz, nx, ny, nz, r, g, b, a, buv[0], buv[1]
                );
                numVertices += 3;
            }

            t += polySize;
        }

        var vertexBuffer = graphicsDevice.createVertexBuffer({
            numVertices: numVertices,
            attributes: ['FLOAT3', 'FLOAT3', 'UBYTE4N', 'FLOAT2'],
            dynamic: false,
            data: data
        });

        return {
            name: solid,
            vertexBuffer: vertexBuffer,
            indexBuffer: null
        }
    }

    PolyhedraManager.prototype.getAll = function () {
        return Object.keys(this.solids);
    };

    PolyhedraManager.prototype.destroy = function () {
        this.graphicsDevice = null;
        this.mathsDevice = null;
        this.colors = null;
        this.scale = 0;
        this.solids = null;
    };

    PolyhedraManager.create = function (graphicsDevice, mathsDevice, colors, scale) {
        var polyhedraManager = new PolyhedraManager();

        if (!colors) {
            colors = [
                [0.722, 0.000, 0.181, 1.000], // red
                [0.943, 0.573, 0.129, 1.000], // yellow
                [0.264, 0.781, 0.181, 1.000], // green
                [0.190, 0.493, 0.872, 1.000], // blue
                [0.607, 0.094, 0.568, 1.000], // purple
                [0.199, 0.199, 0.199, 1.000]  // grey
            ];
        }
        if (!scale) {
            scale = 1.0;
        }

        polyhedraManager.graphicsDevice = graphicsDevice;
        polyhedraManager.mathsDevice = mathsDevice;
        polyhedraManager.colors = colors;
        polyhedraManager.scale = scale;

        var ipi = 1 / Math.PI;
        var asin = Math.asin;

        polyhedraManager.uvMappingFns = {
            planar: function (x, y, z) {
                return [0, 0];
            },
            spherical: function (x, y, z) {
                var uv = [asin(x) * ipi + 0.5, asin(y) * ipi + 0.5];
                return uv;
            },
            cylindrical: function (x, y, z) {
                return [0, 0];
            },
            cube: function (x, y, z) {
                return [0, 0];
            }
        };

        var sqrt = Math.sqrt;
        var pow = Math.pow;
        var pm = polyhedraManager;

        var j = 1+sqrt(5)
        var g = j/2;
        var d = 1/g;
        var q = g+1;
        var s = sqrt(2);

        var w = (pow(sqrt(297)+17, 1/3) - pow(sqrt(297)-17, 1/3)-1)/3;
        var w2 = pow((g+sqrt(g-5/27))/2, 1/3) + pow((g-sqrt(g-5/27))/2, 1/3);
        var aa = w2 - 1/w2;
        var bb = w2*g + q + g/w2;

        polyhedraManager.solids = {
            // Platonic solid
            tetrahedron: [
                [-1, -s, 0, -1, s, 0, 1, 0, -s, 1, 0, s],
                [0, 1, 3, 3, 1, 2, 1, 0, 2, 3, 2, 0],
                3
            ],
            hexahedron: [
                [-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1],
                [0, 2, 3, 1, 2, 6, 7, 3, 0, 4, 6, 2, 3, 7, 5, 1, 0, 1, 5, 4, 6, 4, 5, 7],
                4
            ],
            octahedron: [
                [-1, 0, 0, 1, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, -1, 0, 0, 1],
                [0, 4, 3, 3, 4, 1, 1, 4, 2, 2, 4, 0, 3, 5, 0, 0, 5, 2, 2, 5, 1, 1, 5, 3],
                3
            ],
            dodecahedron: [
                [0, -d, -g, 0, -d, g, 0, d, -g, 0, d, g, -d, -g, 0, -d, g, 0, d, -g, 0, d, g, 0, -g, 0, -d, g, 0, -d, -g, 0, d, g, 0, d, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1],
                [0, 2, 14, 8, 12, 0, 16, 9, 18, 2, 4, 6, 16, 0, 12, 2, 18, 7, 5, 14, 13, 4, 12, 8, 10, 6, 17, 11, 9, 16, 15, 10, 8, 14, 5, 18, 9, 11, 19, 7, 1, 17, 6, 4, 13, 5, 7, 19, 3, 15, 13, 10, 15, 3, 1, 19, 11, 17, 1, 3],
                5
            ],
            icosahedron: [
                [0, -1, -g, 0, -1, g, 0, 1, -g, 0, 1, g, -1, -g, 0, -1, g, 0, 1, -g, 0, 1, g, 0, -g, 0, -1, g, 0, -1, -g, 0, 1, g, 0, 1],
                [0, 2, 8, 2, 0, 9, 4, 0, 8, 4, 6, 0, 6, 9, 0, 5, 8, 2, 5, 2, 7, 7, 2, 9, 10, 4, 8, 10, 8, 5, 6, 11, 9, 9, 11, 7, 10, 5, 3, 10, 1, 4, 1, 11, 6, 3, 7, 11, 1, 6, 4, 3, 5, 7, 3, 11, 1, 1, 10, 3],
                3
            ],

            // Archimedean solid
            truncatedTetrahedron: [
                [3, 1, 1, 1, 3, 1, 1, 1, 3, 3, -1, -1, -1, 3, -1, -1, -1, 3, -3, -1, 1, 1, -3, -1, -1, 1, -3, -3, 1, -1, -1, -3, 1, 1, -1, -3],
                [6, 11, 3, 0, 1, 4, 8, 6, 3, 7, 10, 5, 2, 0, 6, 6, 10, 7, 11, 8, 9, 6, 9, 4, 1, 2, 5, 6, 3, 0, 2, 1, 3, 8, 4, 9, 3, 6, 5, 10, 3, 7, 3, 11]
            ],
            cuboctahedron: [
                [-1, -1, 0, -1, 1, 0, 1, -1, 0, 1, 1, 0, 0, -1, -1, 0, -1, 1, 0, 1, -1, 0, 1, 1, -1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, 1],
                [3, 3, 11, 7, 3, 9, 3, 6, 3, 11, 2, 5, 3, 4, 2, 9, 3, 7, 10, 1, 3, 1, 8, 6, 3, 0, 10, 5, 3, 4, 8, 0, 4, 3, 9, 2, 11, 4, 11, 5, 10, 7, 4, 7, 1, 6, 3, 4, 10, 0, 8, 1, 4, 6, 8, 4, 9, 4, 4, 0, 5, 2]
            ],
            truncatedHexahedron: [
                [-(s-1), -1, -1, -(s-1), -1, 1, -(s-1), 1, -1, -(s-1), 1, 1, (s-1), -1, -1, (s-1), -1, 1, (s-1), 1, -1, (s-1), 1, 1, -1, -(s-1), -1, 1, -(s-1), -1, -1, -(s-1), 1, 1, -(s-1), 1, -1, (s-1), -1, 1, (s-1), -1, -1, (s-1), 1, 1, (s-1), 1, -1, -1, -(s-1), -1, 1, -(s-1), 1, -1, -(s-1), 1, 1, -(s-1), -1, -1, (s-1), -1, 1, (s-1), 1, -1, (s-1), 1, 1, (s-1)],
                [8, 5, 22, 18, 4, 0, 16, 20, 1, 8, 21, 14, 10, 20, 16, 8, 12, 17, 8, 14, 3, 7, 15, 11, 5, 1, 10, 8, 6, 19, 23, 7, 3, 21, 17, 2, 8, 0, 4, 9, 13, 6, 2, 12, 8, 8, 13, 9, 18, 22, 11, 15, 23, 19, 3, 11, 22, 5, 3, 18, 9, 4, 3, 3, 14, 21, 3, 2, 17, 12, 3, 10, 1, 20, 3, 7, 23, 15, 3, 13, 19, 6, 3, 0, 8, 16]
            ],
            truncatedOctahedron: [
                [-2, -1, 0, -2, 1, 0, 2, -1, 0, 2, 1, 0, 0, -2, -1, 0, -2, 1, 0, 2, -1, 0, 2, 1, -1, 0, -2, 1, 0, -2, -1, 0, 2, 1, 0, 2, -1, -2, 0, -1, 2, 0, 1, -2, 0, 1, 2, 0, 0, -1, -2, 0, -1, 2, 0, 1, -2, 0, 1, 2, -2, 0, -1, 2, 0, -1, -2, 0, 1, 2, 0, 1],
                [6, 17, 11, 23, 2, 14, 5, 6, 14, 2, 21, 9, 16, 4, 6, 7, 15, 3, 23, 11, 19, 6, 0, 12, 4, 16, 8, 20, 6, 19, 10, 22, 1, 13, 7, 6, 17, 5, 12, 0, 22, 10, 6, 1, 20, 8, 18, 6, 13, 6, 6, 18, 9, 21, 3, 15, 4, 12, 5, 14, 4, 4, 2, 23, 3, 21, 4, 13, 6, 15, 7, 4, 8, 16, 9, 18, 4, 0, 20, 1, 22, 4, 11, 17, 10, 19]
            ],
            rhombicuboctahedron: [
                [-(1+s), -1, -1, -(1+s), -1, 1, -(1+s), 1, -1, -(1+s), 1, 1, (1+s), -1, -1, (1+s), -1, 1, (1+s), 1, -1, (1+s), 1, 1, -1, -(1+s), -1, 1, -(1+s), -1, -1, -(1+s), 1, 1, -(1+s), 1, -1, (1+s), -1, 1, (1+s), -1, -1, (1+s), 1, 1, (1+s), 1, -1, -1, -(1+s), -1, 1, -(1+s), 1, -1, -(1+s), 1, 1, -(1+s), -1, -1, (1+s), -1, 1, (1+s), 1, -1, (1+s), 1, 1, (1+s)],
                [4, 5, 7, 6, 4, 4, 5, 22, 23, 7, 4, 6, 7, 15, 13, 4, 4, 6, 19, 18, 4, 9, 11, 5, 4, 4, 21, 20, 1, 3, 4, 3, 1, 0, 2, 4, 2, 12, 14, 3, 4, 17, 2, 0, 16, 4, 0, 1, 10, 8, 4, 10, 11, 9, 8, 4, 8, 9, 18, 16, 4, 16, 18, 19, 17, 4, 11, 10, 20, 22, 4, 22, 20, 21, 23, 4, 23, 21, 14, 15, 4, 12, 17, 19, 13, 4, 13, 15, 14, 12, 3, 11, 22, 5, 3, 7, 23, 15, 3, 6, 13, 19, 3, 9, 4, 18, 3, 14, 21, 3, 3, 16, 0, 8, 3, 17, 12, 2, 3, 1, 20, 10]
            ],
            truncatedCuboctahedron: [
                [-1, -(1+s), -(1+s+s), -1, -(1+s), (1+s+s), -1, (1+s), -(1+s+s), -1, (1+s), (1+s+s), 1, -(1+s), -(1+s+s), 1, -(1+s), (1+s+s), 1, (1+s), -(1+s+s), 1, (1+s), (1+s+s), -(1+s+s), -1, -(1+s), (1+s+s), -1, -(1+s), -(1+s+s), -1, (1+s), (1+s+s), -1, (1+s), -(1+s+s), 1, -(1+s), (1+s+s), 1, -(1+s), -(1+s+s), 1, (1+s), (1+s+s), 1, (1+s), -(1+s), -(1+s+s), -1, -(1+s), (1+s+s), -1, (1+s), -(1+s+s), -1, (1+s), (1+s+s), -1, -(1+s), -(1+s+s), 1, -(1+s), (1+s+s), 1, (1+s), -(1+s+s), 1, (1+s), (1+s+s), 1, -1, -(1+s+s), -(1+s), -1, -(1+s+s), (1+s), -1, (1+s+s), -(1+s), -1, (1+s+s), (1+s), 1, -(1+s+s), -(1+s), 1, -(1+s+s), (1+s), 1, (1+s+s), -(1+s), 1, (1+s+s), (1+s), -(1+s), -1, -(1+s+s), (1+s), -1, -(1+s+s), -(1+s), -1, (1+s+s), (1+s), -1, (1+s+s), -(1+s), 1, -(1+s+s), (1+s), 1, -(1+s+s), -(1+s), 1, (1+s+s), (1+s), 1, (1+s+s), -(1+s+s), -(1+s), -1, -(1+s+s), (1+s), -1, (1+s+s), -(1+s), -1, (1+s+s), (1+s), -1, -(1+s+s), -(1+s), 1, -(1+s+s), (1+s), 1, (1+s+s), -(1+s), 1, (1+s+s), (1+s), 1],
                [8, 5, 1, 34, 38, 3, 7, 39, 35, 8, 12, 41, 45, 14, 10, 44, 40, 8, 8, 37, 6, 2, 36, 32, 0, 4, 33, 8, 23, 31, 27, 21, 17, 26, 30, 19, 8, 24, 16, 20, 25, 29, 22, 18, 28, 8, 43, 13, 9, 42, 46, 11, 15, 47, 6, 3, 38, 14, 45, 21, 27, 6, 1, 25, 20, 44, 10, 34, 6, 11, 46, 22, 29, 5, 35, 6, 15, 39, 7, 31, 23, 47, 6, 2, 26, 17, 41, 12, 36, 6, 37, 13, 43, 19, 30, 6, 6, 8, 40, 16, 24, 0, 32, 6, 9, 33, 4, 28, 18, 42, 4, 7, 3, 27, 31, 4, 38, 34, 10, 14, 4, 5, 29, 25, 1, 4, 39, 15, 11, 35, 4, 36, 12, 8, 32, 4, 6, 30, 26, 2, 4, 47, 23, 19, 43, 4, 40, 44, 20, 16, 4, 0, 24, 28, 4, 4, 9, 13, 37, 33, 4, 41, 17, 21, 45, 4, 46, 42, 18, 22]
            ],
            snubHexahedron1: [
                [-1, -w, 1/w, -1, w, -1/w, 1, -w, -1/w, 1, w, 1/w, 1/w, -1, -w, -1/w, -1, w, -1/w, 1, -w, 1/w, 1, w, -w, 1/w, -1, w, -1/w, -1, -w, -1/w, 1, w, 1/w, 1, -1, -1/w, -w, -1, 1/w, w, 1, -1/w, w, 1, 1/w, -w, -w, -1, -1/w, w, -1, 1/w, w, 1, -1/w, -w, 1, 1/w, -1/w, -w, -1, 1/w, w, -1, -1/w, w, 1, 1/w, -w, 1],
                [4, 9, 12, 10, 14, 4, 16, 2, 18, 1, 4, 3, 17, 0, 19, 4, 15, 11, 13, 8, 4, 22, 5, 20, 6, 4, 23, 7, 21, 4, 3, 12, 5, 10, 3, 12, 20, 5, 3, 5, 0, 10, 3, 10, 0, 17, 3, 22, 0, 5, 3, 11, 15, 7, 3, 19, 11, 3, 3, 11, 7, 3, 3, 9, 14, 4, 3, 14, 23, 4, 3, 10, 17, 14, 3, 14, 17, 23, 3, 15, 21, 7, 3, 7, 23, 3, 3, 20, 12, 16, 3, 1, 18, 8, 3, 23, 17, 3, 3, 6, 20, 1, 3, 12, 9, 16, 3, 20, 16, 1, 3, 9, 2, 16, 3, 9, 4, 2, 3, 4, 21, 2, 3, 18, 21, 15, 3, 18, 15, 8, 3, 8, 6, 1, 3, 6, 8, 13, 3, 22, 6, 13, 3, 11, 19, 13, 3, 13, 19, 22, 3, 22, 19, 0, 3, 21, 18, 2]
            ],
            snubHexahedron2: [
                [1, -w, 1/w, 1, w, -1/w, -1, -w, -1/w, -1, w, 1/w, -1/w, -1, -w, 1/w, -1, w, 1/w, 1, -w, -1/w, 1, w, w, 1/w, -1, -w, -1/w, -1, w, -1/w, 1, -w, 1/w, 1, 1, -1/w, -w, 1, 1/w, w, -1, -1/w, w, -1, 1/w, -w, w, -1, -1/w, -w, -1, 1/w, -w, 1, -1/w, w, 1, 1/w, 1/w, -w, -1, -1/w, w, -1, 1/w, w, 1, -1/w, -w, 1],
                [4, 9, 14, 10, 12, 4, 18, 2, 16, 1, 4, 3, 19, 0, 17, 4, 15, 8, 13, 11, 4, 22, 6, 20, 5, 4, 23, 4, 21, 7, 3, 12, 10, 5, 3, 12, 5, 20, 3, 5, 10, 0, 3, 10, 17, 0, 3, 22, 5, 0, 3, 11, 7, 15, 3, 19, 3, 11, 3, 11, 3, 7, 3, 9, 4, 14, 3, 14, 4, 23, 3, 10, 14, 17, 3, 14, 23, 17, 3, 15, 7, 21, 3, 7, 3, 23, 3, 20, 16, 12, 3, 1, 8, 18, 3, 23, 3, 17, 3, 6, 1, 20, 3, 12, 16, 9, 3, 20, 1, 16, 3, 9, 16, 2, 3, 9, 2, 4, 3, 4, 2, 21, 3, 18, 15, 21, 3, 18, 8, 15, 3, 8, 1, 6, 3, 6, 13, 8, 3, 22, 13, 6, 3, 11, 13, 19, 3, 13, 22, 19, 3, 22, 0, 19, 3, 21, 2, 18]
            ],
            icosidodecahedron: [
                [-j, 0, 0, j, 0, 0, 0, -j, 0, 0, j, 0, 0, 0, -j, 0, 0, j, -1, -g, -q, -1, -g, q, -1, g, -q, -1, g, q, 1, -g, -q, 1, -g, q, 1, g, -q, 1, g, q, -g, -q, -1, -g, q, -1, g, -q, -1, g, q, -1, -g, -q, 1, -g, q, 1, g, -q, 1, g, q, 1, -q, -1, -g, q, -1, -g, -q, -1, g, q, -1, g, -q, 1, -g, q, 1, -g, -q, 1, g, q, 1, g],
                [3, 17, 21, 3, 3, 27, 23, 1, 3, 1, 25, 29, 3, 21, 29, 13, 3, 12, 27, 17, 3, 10, 16, 23, 3, 20, 11, 25, 3, 9, 13, 5, 3, 19, 9, 28, 3, 26, 8, 15, 3, 15, 3, 19, 3, 7, 5, 11, 3, 18, 24, 7, 3, 2, 14, 18, 3, 2, 20, 16, 3, 4, 6, 10, 3, 6, 22, 14, 3, 8, 4, 12, 3, 0, 22, 26, 3, 0, 28, 24, 5, 17, 27, 1, 29, 21, 5, 1, 23, 16, 20, 25, 5, 4, 10, 23, 27, 12, 5, 5, 13, 29, 25, 11, 5, 3, 21, 13, 9, 19, 5, 8, 12, 17, 3, 15, 5, 0, 26, 15, 19, 28, 5, 24, 28, 9, 5, 7, 5, 0, 24, 18, 14, 22, 5, 2, 18, 7, 11, 20, 5, 10, 6, 14, 2, 16, 5, 8, 26, 22, 6, 4]
            ],
            truncatedDodecahedron: [
                [(0), -(3-g), -(5*g), (0), -(3-g), (5*g), (0), (3-g), -(5*g), (0), (3-g), (5*g), -(5*g), (0), -(3-g), (5*g), (0), -(3-g), -(5*g), (0), (3-g), (5*g), (0), (3-g), -(3-g), -(5*g), (0), -(3-g), (5*g), (0), (3-g), -(5*g), (0), (3-g), (5*g), (0), -(3-g), -(2+g), -(4+2*g), -(3-g), -(2+g), (4+2*g), -(3-g), (2+g), -(4+2*g), -(3-g), (2+g), (4+2*g), (3-g), -(2+g), -(4+2*g), (3-g), -(2+g), (4+2*g), (3-g), (2+g), -(4+2*g), (3-g), (2+g), (4+2*g), -(4+2*g), -(3-g), -(2+g), (4+2*g), -(3-g), -(2+g), -(4+2*g), -(3-g), (2+g), (4+2*g), -(3-g), (2+g), -(4+2*g), (3-g), -(2+g), (4+2*g), (3-g), -(2+g), -(4+2*g), (3-g), (2+g), (4+2*g), (3-g), (2+g), -(2+g), -(4+2*g), -(3-g), -(2+g), (4+2*g), -(3-g), (2+g), -(4+2*g), -(3-g), (2+g), (4+2*g), -(3-g), -(2+g), -(4+2*g), (3-g), -(2+g), (4+2*g), (3-g), (2+g), -(4+2*g), (3-g), (2+g), (4+2*g), (3-g), -(2+g), -(-2+4*g), -(1+3*g), -(2+g), -(-2+4*g), (1+3*g), -(2+g), (-2+4*g), -(1+3*g), -(2+g), (-2+4*g), (1+3*g), (2+g), -(-2+4*g), -(1+3*g), (2+g), -(-2+4*g), (1+3*g), (2+g), (-2+4*g), -(1+3*g), (2+g), (-2+4*g), (1+3*g), -(1+3*g), -(2+g), -(-2+4*g), (1+3*g), -(2+g), -(-2+4*g), -(1+3*g), -(2+g), (-2+4*g), (1+3*g), -(2+g), (-2+4*g), -(1+3*g), (2+g), -(-2+4*g), (1+3*g), (2+g), -(-2+4*g), -(1+3*g), (2+g), (-2+4*g), (1+3*g), (2+g), (-2+4*g), -(-2+4*g), -(1+3*g), -(2+g), -(-2+4*g), (1+3*g), -(2+g), (-2+4*g), -(1+3*g), -(2+g), (-2+4*g), (1+3*g), -(2+g), -(-2+4*g), -(1+3*g), (2+g), -(-2+4*g), (1+3*g), (2+g), (-2+4*g), -(1+3*g), (2+g), (-2+4*g), (1+3*g), (2+g)],
                [10, 24, 48, 53, 29, 33, 57, 50, 26, 6, 4, 10, 53, 38, 14, 18, 42, 55, 31, 11, 9, 29, 10, 39, 57, 33, 9, 11, 35, 59, 43, 19, 15, 10, 40, 45, 21, 25, 49, 42, 18, 2, 0, 16, 10, 28, 52, 44, 20, 4, 6, 22, 46, 56, 32, 10, 5, 7, 27, 51, 59, 35, 31, 55, 49, 25, 10, 8, 32, 56, 37, 13, 17, 41, 58, 34, 10, 10, 17, 1, 3, 19, 43, 51, 27, 23, 47, 41, 10, 47, 23, 7, 5, 21, 45, 54, 30, 34, 58, 10, 37, 46, 22, 26, 50, 39, 15, 3, 1, 13, 10, 24, 20, 44, 36, 12, 0, 2, 14, 38, 48, 10, 36, 52, 28, 8, 10, 30, 54, 40, 16, 12, 3, 33, 29, 9, 3, 50, 57, 39, 3, 53, 48, 38, 3, 11, 31, 35, 3, 25, 21, 5, 3, 42, 49, 55, 3, 7, 23, 27, 3, 40, 54, 45, 3, 52, 36, 44, 3, 8, 28, 32, 3, 22, 6, 26, 3, 20, 24, 4, 3, 51, 43, 59, 3, 56, 46, 37, 3, 13, 1, 17, 3, 41, 47, 58, 3, 3, 15, 19, 3, 14, 2, 18, 3, 12, 16, 0, 3, 10, 34, 30]
            ],
            truncatedIcosahedron: [
                [0, -1, -3*g, 0, -1, 3*g, 0, 1, -3*g, 0, 1, 3*g, -3*g, 0, -1, 3*g, 0, -1, -3*g, 0, 1, 3*g, 0, 1, -1, -3*g, 0, -1, 3*g, 0, 1, -3*g, 0, 1, 3*g, 0, -2, -(g+q), -g, -2, -(g+q), g, -2, (g+q), -g, -2, (g+q), g, 2, -(g+q), -g, 2, -(g+q), g, 2, (g+q), -g, 2, (g+q), g, -g, -2, -(g+q), g, -2, -(g+q), -g, -2, (g+q), g, -2, (g+q), -g, 2, -(g+q), g, 2, -(g+q), -g, 2, (g+q), g, 2, (g+q), -(g+q), -g, -2, -(g+q), g, -2, (g+q), -g, -2, (g+q), g, -2, -(g+q), -g, 2, -(g+q), g, 2, (g+q), -g, 2, (g+q), g, 2, -1, -(2+g), -2*g, -1, -(2+g), 2*g, -1, (2+g), -2*g, -1, (2+g), 2*g, 1, -(2+g), -2*g, 1, -(2+g), 2*g, 1, (2+g), -2*g, 1, (2+g), 2*g, -2*g, -1, -(2+g), 2*g, -1, -(2+g), -2*g, -1, (2+g), 2*g, -1, (2+g), -2*g, 1, -(2+g), 2*g, 1, -(2+g), -2*g, 1, (2+g), 2*g, 1, (2+g), -(2+g), -2*g, -1, -(2+g), 2*g, -1, (2+g), -2*g, -1, (2+g), 2*g, -1, -(2+g), -2*g, 1, -(2+g), 2*g, 1, (2+g), -2*g, 1, (2+g), 2*g, 1],
                [6, 9, 11, 19, 43, 39, 15, 6, 55, 31, 5, 7, 35, 59, 6, 27, 43, 19, 59, 35, 51, 6, 11, 9, 14, 38, 42, 18, 6, 20, 44, 28, 52, 12, 36, 6, 0, 2, 24, 48, 44, 20, 6, 48, 24, 38, 14, 53, 29, 6, 0, 21, 45, 49, 25, 2, 6, 12, 8, 10, 16, 40, 36, 6, 18, 42, 25, 49, 31, 55, 6, 23, 47, 34, 58, 17, 41, 6, 1, 3, 27, 51, 47, 23, 6, 21, 40, 16, 54, 30, 45, 6, 7, 5, 30, 54, 58, 34, 6, 39, 26, 50, 33, 57, 15, 6, 3, 1, 22, 46, 50, 26, 6, 57, 33, 6, 4, 29, 53, 6, 6, 32, 56, 52, 28, 4, 6, 22, 37, 13, 56, 32, 46, 6, 37, 41, 17, 10, 8, 13, 5, 59, 19, 11, 18, 55, 5, 35, 7, 34, 47, 51, 5, 3, 26, 39, 43, 27, 5, 44, 48, 29, 4, 28, 5, 20, 36, 40, 21, 0, 5, 38, 24, 2, 25, 42, 5, 14, 9, 15, 57, 53, 5, 10, 17, 58, 54, 16, 5, 22, 1, 23, 41, 37, 5, 49, 45, 30, 5, 31, 5, 50, 46, 32, 6, 33, 5, 13, 8, 12, 52, 56]
            ],
            rhombicosidodecahedron: [
                [-1, -1, -g*q, -1, -1, g*q, -1, 1, -g*q, -1, 1, g*q, 1, -1, -g*q, 1, -1, g*q, 1, 1, -g*q, 1, 1, g*q, -g*q, -1, -1, g*q, -1, -1, -g*q, -1, 1, g*q, -1, 1, -g*q, 1, -1, g*q, 1, -1, -g*q, 1, 1, g*q, 1, 1, -1, -g*q, -1, -1, g*q, -1, 1, -g*q, -1, 1, g*q, -1, -1, -g*q, 1, -1, g*q, 1, 1, -g*q, 1, 1, g*q, 1, -q, -g, -j, -q, -g, j, -q, g, -j, -q, g, j, q, -g, -j, q, -g, j, q, g, -j, q, g, j, -j, -q, -g, j, -q, -g, -j, -q, g, j, -q, g, -j, q, -g, j, q, -g, -j, q, g, j, q, g, -g, -j, -q, -g, j, -q, g, -j, -q, g, j, -q, -g, -j, q, -g, j, q, g, -j, q, g, j, q, -(2+g), 0, -q, -(2+g), 0, q, (2+g), 0, -q, (2+g), 0, q, -q, -(2+g), 0, q, -(2+g), 0, -q, (2+g), 0, q, (2+g), 0, 0, -q, -(2+g), 0, q, -(2+g), 0, -q, (2+g), 0, q, (2+g)],
                [5, 44, 58, 46, 22, 20, 5, 1, 25, 49, 27, 3, 5, 57, 43, 19, 17, 41, 5, 21, 23, 47, 59, 45, 5, 31, 51, 29, 5, 7, 5, 10, 34, 52, 32, 8, 5, 48, 24, 0, 2, 26, 5, 12, 36, 54, 38, 14, 5, 6, 4, 28, 50, 30, 5, 15, 39, 55, 37, 13, 5, 33, 53, 35, 11, 9, 5, 40, 16, 18, 42, 56, 4, 34, 44, 20, 52, 4, 44, 25, 1, 58, 4, 3, 27, 45, 59, 4, 5, 1, 3, 7, 4, 25, 34, 10, 49, 4, 27, 49, 14, 38, 4, 20, 22, 18, 16, 4, 18, 53, 33, 42, 4, 6, 30, 43, 57, 4, 2, 57, 41, 26, 4, 4, 6, 2, 0, 4, 47, 31, 7, 59, 4, 55, 39, 47, 23, 4, 5, 29, 46, 58, 4, 31, 39, 15, 51, 4, 52, 16, 40, 32, 4, 12, 48, 26, 36, 4, 36, 41, 17, 54, 4, 38, 54, 21, 45, 4, 21, 17, 19, 23, 4, 55, 19, 43, 37, 4, 30, 50, 13, 37, 4, 33, 9, 50, 28, 4, 14, 10, 8, 12, 4, 9, 11, 15, 13, 4, 11, 35, 29, 51, 4, 53, 22, 46, 35, 4, 56, 42, 28, 4, 4, 24, 40, 56, 0, 4, 48, 8, 32, 24, 3, 34, 25, 44, 3, 58, 1, 5, 3, 27, 38, 45, 3, 52, 20, 16, 3, 22, 53, 18, 3, 2, 6, 57, 3, 3, 59, 7, 3, 19, 55, 23, 3, 47, 39, 31, 3, 29, 35, 46, 3, 14, 49, 10, 3, 41, 36, 26, 3, 54, 17, 21, 3, 37, 43, 30, 3, 0, 56, 4, 3, 9, 13, 50, 3, 33, 28, 42, 3, 12, 8, 48, 3, 11, 51, 15, 3, 24, 32, 40]
            ],
            truncatedIcosidodecahedron: [
                [-d, -d, -(3+g), -d, -d, (3+g), -d, d, -(3+g), -d, d, (3+g), d, -d, -(3+g), d, -d, (3+g), d, d, -(3+g), d, d, (3+g), -(3+g), -d, -d, -(3+g), -d, d, -(3+g), d, -d, -(3+g), d, d, (3+g), -d, -d, (3+g), -d, d, (3+g), d, -d, (3+g), d, d, -d, -(3+g), -d, -d, -(3+g), d, -d, (3+g), -d, -d, (3+g), d, d, -(3+g), -d, d, -(3+g), d, d, (3+g), -d, d, (3+g), d, -2*d, -g, -(g+q), -2*d, -g, (g+q), -2*d, g, -(g+q), -2*d, g, (g+q), 2*d, -g, -(g+q), 2*d, -g, (g+q), 2*d, g, -(g+q), 2*d, g, (g+q), -(g+q), -2*d, -g, -(g+q), -2*d, g, -(g+q), 2*d, -g, -(g+q), 2*d, g, (g+q), -2*d, -g, (g+q), -2*d, g, (g+q), 2*d, -g, (g+q), 2*d, g, -g, -(g+q), -2*d, -g, -(g+q), 2*d, -g, (g+q), -2*d, -g, (g+q), 2*d, g, -(g+q), -2*d, g, -(g+q), 2*d, g, (g+q), -2*d, g, (g+q), 2*d, -d, -q, -(j+d), -d, -q, (j+d), -d, q, -(j+d), -d, q, (j+d), d, -q, -(j+d), d, -q, (j+d), d, q, -(j+d), d, q, (j+d), -(j+d), -d, -q, -(j+d), -d, q, -(j+d), d, -q, -(j+d), d, q, (j+d), -d, -q, (j+d), -d, q, (j+d), d, -q, (j+d), d, q, -q, -(j+d), -d, -q, -(j+d), d, -q, (j+d), -d, -q, (j+d), d, q, -(j+d), -d, q, -(j+d), d, q, (j+d), -d, q, (j+d), d, -(j-1), -2, -(2+g), -(j-1), -2, (2+g), -(j-1), 2, -(2+g), -(j-1), 2, (2+g), (j-1), -2, -(2+g), (j-1), -2, (2+g), (j-1), 2, -(2+g), (j-1), 2, (2+g), -(2+g), -(j-1), -2, -(2+g), -(j-1), 2, -(2+g), (j-1), -2, -(2+g), (j-1), 2, (2+g), -(j-1), -2, (2+g), -(j-1), 2, (2+g), (j-1), -2, (2+g), (j-1), 2, -2, -(2+g), -(j-1), -2, -(2+g), (j-1), -2, (2+g), -(j-1), -2, (2+g), (j-1), 2, -(2+g), -(j-1), 2, -(2+g), (j-1), 2, (2+g), -(j-1), 2, (2+g), (j-1), -g, -3, -j, -g, -3, j, -g, 3, -j, -g, 3, j, g, -3, -j, g, -3, j, g, 3, -j, g, 3, j, -j, -g, -3, -j, -g, 3, -j, g, -3, -j, g, 3, j, -g, -3, j, -g, 3, j, g, -3, j, g, 3, -3, -j, -g, -3, -j, g, -3, j, -g, -3, j, g, 3, -j, -g, 3, -j, g, 3, j, -g, 3, j, g],
                [10, 44, 92, 100, 52, 48, 96, 88, 40, 16, 20, 10, 68, 69, 117, 85, 37, 13, 12, 36, 84, 116, 10, 8, 9, 33, 81, 113, 65, 64, 112, 80, 32, 10, 21, 17, 41, 89, 97, 49, 53, 101, 93, 45, 10, 10, 34, 82, 114, 66, 67, 115, 83, 35, 11, 10, 77, 29, 5, 7, 31, 79, 111, 63, 61, 109, 10, 90, 98, 50, 54, 102, 94, 46, 22, 18, 42, 10, 51, 99, 91, 43, 19, 23, 47, 95, 103, 55, 10, 119, 71, 70, 118, 86, 38, 14, 15, 39, 87, 10, 74, 106, 58, 56, 104, 72, 24, 0, 2, 26, 10, 57, 59, 107, 75, 27, 3, 1, 25, 73, 105, 10, 76, 108, 60, 62, 110, 78, 30, 6, 4, 28, 6, 44, 20, 21, 45, 69, 68, 6, 63, 39, 15, 13, 37, 61, 6, 12, 14, 38, 62, 60, 36, 6, 80, 112, 88, 96, 72, 104, 6, 16, 40, 64, 65, 41, 17, 6, 34, 10, 8, 32, 56, 58, 6, 9, 11, 35, 59, 57, 33, 6, 114, 82, 106, 74, 98, 90, 6, 101, 77, 109, 85, 117, 93, 6, 116, 84, 108, 76, 100, 92, 6, 75, 107, 83, 115, 91, 99, 6, 7, 3, 27, 51, 55, 31, 6, 43, 67, 66, 42, 18, 19, 6, 23, 22, 46, 70, 71, 47, 6, 103, 95, 119, 87, 111, 79, 6, 118, 94, 102, 78, 110, 86, 6, 50, 26, 2, 6, 30, 54, 6, 0, 24, 48, 52, 28, 4, 6, 1, 5, 29, 53, 49, 25, 6, 113, 81, 105, 73, 97, 89, 4, 20, 16, 17, 21, 4, 92, 44, 68, 116, 4, 109, 61, 37, 85, 4, 69, 45, 93, 117, 4, 41, 65, 113, 89, 4, 56, 32, 80, 104, 4, 10, 11, 9, 8, 4, 82, 34, 58, 106, 4, 101, 53, 29, 77, 4, 42, 66, 114, 90, 4, 40, 88, 112, 64, 4, 27, 75, 99, 51, 4, 107, 59, 35, 83, 4, 91, 115, 67, 43, 4, 55, 103, 79, 31, 4, 47, 71, 119, 95, 4, 19, 18, 22, 23, 4, 46, 94, 118, 70, 4, 14, 12, 13, 15, 4, 87, 39, 63, 111, 4, 60, 108, 84, 36, 4, 110, 62, 38, 86, 4, 98, 74, 26, 50, 4, 2, 0, 4, 6, 4, 1, 3, 7, 5, 4, 73, 25, 49, 97, 4, 96, 48, 24, 72, 4, 100, 76, 28, 52, 4, 81, 33, 57, 105, 4, 102, 54, 30, 78]
            ],
            snubDodecahedron1: [
                [-2*aa, -2, 2*bb, -2*aa, 2, -2*bb, 2*aa, -2, -2*bb, 2*aa, 2, 2*bb, 2*bb, -2*aa, -2, -2*bb, -2*aa, 2, -2*bb, 2*aa, -2, 2*bb, 2*aa, 2, -2, 2*bb, -2*aa, 2, -2*bb, -2*aa, -2, -2*bb, 2*aa, 2, 2*bb, 2*aa, -(aa+bb*d+g), -(-aa*g+bb+d), (aa*d+bb*g-1), -(aa+bb*d+g), (-aa*g+bb+d), -(aa*d+bb*g-1), (aa+bb*d+g), -(-aa*g+bb+d), -(aa*d+bb*g-1), (aa+bb*d+g), (-aa*g+bb+d), (aa*d+bb*g-1), (aa*d+bb*g-1), -(aa+bb*d+g), -(-aa*g+bb+d), -(aa*d+bb*g-1), -(aa+bb*d+g), (-aa*g+bb+d), -(aa*d+bb*g-1), (aa+bb*d+g), -(-aa*g+bb+d), (aa*d+bb*g-1), (aa+bb*d+g), (-aa*g+bb+d), -(-aa*g+bb+d), (aa*d+bb*g-1), -(aa+bb*d+g), (-aa*g+bb+d), -(aa*d+bb*g-1), -(aa+bb*d+g), -(-aa*g+bb+d), -(aa*d+bb*g-1), (aa+bb*d+g), (-aa*g+bb+d), (aa*d+bb*g-1), (aa+bb*d+g), -(-aa*d+bb*g+1), -(-aa+bb*d-g), (aa*g+bb-d), -(-aa*d+bb*g+1), (-aa+bb*d-g), -(aa*g+bb-d), (-aa*d+bb*g+1), -(-aa+bb*d-g), -(aa*g+bb-d), (-aa*d+bb*g+1), (-aa+bb*d-g), (aa*g+bb-d), (aa*g+bb-d), -(-aa*d+bb*g+1), -(-aa+bb*d-g), -(aa*g+bb-d), -(-aa*d+bb*g+1), (-aa+bb*d-g), -(aa*g+bb-d), (-aa*d+bb*g+1), -(-aa+bb*d-g), (aa*g+bb-d), (-aa*d+bb*g+1), (-aa+bb*d-g), -(-aa+bb*d-g), (aa*g+bb-d), -(-aa*d+bb*g+1), (-aa+bb*d-g), -(aa*g+bb-d), -(-aa*d+bb*g+1), -(-aa+bb*d-g), -(aa*g+bb-d), (-aa*d+bb*g+1), (-aa+bb*d-g), (aa*g+bb-d), (-aa*d+bb*g+1), -(-aa*d+bb*g-1), -(aa-bb*d-g), (aa*g+bb+d), -(-aa*d+bb*g-1), (aa-bb*d-g), -(aa*g+bb+d), (-aa*d+bb*g-1), -(aa-bb*d-g), -(aa*g+bb+d), (-aa*d+bb*g-1), (aa-bb*d-g), (aa*g+bb+d), (aa*g+bb+d), -(-aa*d+bb*g-1), -(aa-bb*d-g), -(aa*g+bb+d), -(-aa*d+bb*g-1), (aa-bb*d-g), -(aa*g+bb+d), (-aa*d+bb*g-1), -(aa-bb*d-g), (aa*g+bb+d), (-aa*d+bb*g-1), (aa-bb*d-g), -(aa-bb*d-g), (aa*g+bb+d), -(-aa*d+bb*g-1), (aa-bb*d-g), -(aa*g+bb+d), -(-aa*d+bb*g-1), -(aa-bb*d-g), -(aa*g+bb+d), (-aa*d+bb*g-1), (aa-bb*d-g), (aa*g+bb+d), (-aa*d+bb*g-1), -(aa+bb*d-g), -(aa*g-bb+d), (aa*d+bb*g+1), -(aa+bb*d-g), (aa*g-bb+d), -(aa*d+bb*g+1), (aa+bb*d-g), -(aa*g-bb+d), -(aa*d+bb*g+1), (aa+bb*d-g), (aa*g-bb+d), (aa*d+bb*g+1), (aa*d+bb*g+1), -(aa+bb*d-g), -(aa*g-bb+d), -(aa*d+bb*g+1), -(aa+bb*d-g), (aa*g-bb+d), -(aa*d+bb*g+1), (aa+bb*d-g), -(aa*g-bb+d), (aa*d+bb*g+1), (aa+bb*d-g), (aa*g-bb+d), -(aa*g-bb+d), (aa*d+bb*g+1), -(aa+bb*d-g), (aa*g-bb+d), -(aa*d+bb*g+1), -(aa+bb*d-g), -(aa*g-bb+d), -(aa*d+bb*g+1), (aa+bb*d-g), (aa*g-bb+d), (aa*d+bb*g+1), (aa+bb*d-g), ],
                [5, 7, 19, 31, 43, 55, 5, 15, 27, 39, 51, 3, 5, 52, 4, 16, 28, 40, 5, 46, 58, 10, 22, 34, 5, 9, 21, 33, 45, 57, 5, 5, 17, 29, 41, 53, 5, 2, 14, 26, 38, 50, 5, 6, 18, 30, 42, 54, 5, 47, 59, 11, 23, 35, 5, 8, 20, 32, 44, 56, 5, 12, 24, 36, 48, 0, 5, 1, 13, 25, 37, 49, 3, 7, 27, 19, 3, 19, 27, 15, 3, 7, 52, 27, 3, 52, 39, 27, 3, 4, 52, 7, 3, 31, 19, 23, 3, 40, 39, 52, 3, 58, 46, 40, 3, 58, 40, 28, 3, 9, 58, 28, 3, 9, 28, 21, 3, 21, 28, 16, 3, 21, 16, 14, 3, 14, 16, 26, 3, 26, 16, 4, 3, 46, 39, 40, 3, 51, 39, 46, 3, 34, 51, 46, 3, 51, 0, 3, 3, 58, 9, 10, 3, 12, 34, 22, 3, 12, 22, 17, 3, 24, 12, 17, 3, 5, 24, 17, 3, 54, 24, 5, 3, 6, 54, 5, 3, 17, 22, 29, 3, 22, 10, 29, 3, 33, 21, 14, 3, 2, 33, 14, 3, 49, 33, 2, 3, 1, 2, 50, 3, 1, 50, 32, 3, 5, 53, 6, 3, 24, 54, 36, 3, 36, 54, 42, 3, 36, 42, 47, 3, 47, 42, 59, 3, 42, 30, 59, 3, 59, 30, 8, 3, 8, 30, 20, 3, 20, 30, 18, 3, 20, 18, 13, 3, 13, 18, 25, 3, 32, 13, 1, 3, 2, 1, 49, 3, 44, 32, 50, 3, 4, 7, 55, 3, 26, 4, 55, 3, 38, 26, 55, 3, 38, 55, 43, 3, 38, 44, 50, 3, 32, 20, 13, 3, 38, 43, 44, 3, 44, 43, 56, 3, 56, 43, 31, 3, 8, 11, 59, 3, 11, 8, 56, 3, 11, 56, 31, 3, 11, 31, 23, 3, 23, 19, 15, 3, 23, 15, 35, 3, 35, 15, 3, 3, 35, 3, 48, 3, 48, 3, 0, 3, 47, 35, 48, 3, 47, 48, 36, 3, 0, 34, 12, 3, 0, 51, 34, 3, 10, 9, 57, 3, 10, 57, 29, 3, 29, 57, 41, 3, 41, 57, 45, 3, 41, 37, 53, 3, 49, 45, 33, 3, 45, 37, 41, 3, 37, 25, 53, 3, 25, 18, 6, 3, 25, 6, 53, 3, 49, 37, 45]
            ],
            snubDodecahedron2: [
                [2*aa, -2, 2*bb, 2*aa, 2, -2*bb, -2*aa, -2, -2*bb, -2*aa, 2, 2*bb, -2*bb, -2*aa, -2, 2*bb, -2*aa, 2, 2*bb, 2*aa, -2, -2*bb, 2*aa, 2, 2, 2*bb, -2*aa, -2, -2*bb, -2*aa, 2, -2*bb, 2*aa, -2, 2*bb, 2*aa, (aa+bb*d+g), -(-aa*g+bb+d), (aa*d+bb*g-1), (aa+bb*d+g), (-aa*g+bb+d), -(aa*d+bb*g-1), -(aa+bb*d+g), -(-aa*g+bb+d), -(aa*d+bb*g-1), -(aa+bb*d+g), (-aa*g+bb+d), (aa*d+bb*g-1), -(aa*d+bb*g-1), -(aa+bb*d+g), -(-aa*g+bb+d), (aa*d+bb*g-1), -(aa+bb*d+g), (-aa*g+bb+d), (aa*d+bb*g-1), (aa+bb*d+g), -(-aa*g+bb+d), -(aa*d+bb*g-1), (aa+bb*d+g), (-aa*g+bb+d), (-aa*g+bb+d), (aa*d+bb*g-1), -(aa+bb*d+g), -(-aa*g+bb+d), -(aa*d+bb*g-1), -(aa+bb*d+g), (-aa*g+bb+d), -(aa*d+bb*g-1), (aa+bb*d+g), -(-aa*g+bb+d), (aa*d+bb*g-1), (aa+bb*d+g), (-aa*d+bb*g+1), -(-aa+bb*d-g), (aa*g+bb-d), (-aa*d+bb*g+1), (-aa+bb*d-g), -(aa*g+bb-d), -(-aa*d+bb*g+1), -(-aa+bb*d-g), -(aa*g+bb-d), -(-aa*d+bb*g+1), (-aa+bb*d-g), (aa*g+bb-d), -(aa*g+bb-d), -(-aa*d+bb*g+1), -(-aa+bb*d-g), (aa*g+bb-d), -(-aa*d+bb*g+1), (-aa+bb*d-g), (aa*g+bb-d), (-aa*d+bb*g+1), -(-aa+bb*d-g), -(aa*g+bb-d), (-aa*d+bb*g+1), (-aa+bb*d-g), (-aa+bb*d-g), (aa*g+bb-d), -(-aa*d+bb*g+1), -(-aa+bb*d-g), -(aa*g+bb-d), -(-aa*d+bb*g+1), (-aa+bb*d-g), -(aa*g+bb-d), (-aa*d+bb*g+1), -(-aa+bb*d-g), (aa*g+bb-d), (-aa*d+bb*g+1), (-aa*d+bb*g-1), -(aa-bb*d-g), (aa*g+bb+d), (-aa*d+bb*g-1), (aa-bb*d-g), -(aa*g+bb+d), -(-aa*d+bb*g-1), -(aa-bb*d-g), -(aa*g+bb+d), -(-aa*d+bb*g-1), (aa-bb*d-g), (aa*g+bb+d), -(aa*g+bb+d), -(-aa*d+bb*g-1), -(aa-bb*d-g), (aa*g+bb+d), -(-aa*d+bb*g-1), (aa-bb*d-g), (aa*g+bb+d), (-aa*d+bb*g-1), -(aa-bb*d-g), -(aa*g+bb+d), (-aa*d+bb*g-1), (aa-bb*d-g), (aa-bb*d-g), (aa*g+bb+d), -(-aa*d+bb*g-1), -(aa-bb*d-g), -(aa*g+bb+d), -(-aa*d+bb*g-1), (aa-bb*d-g), -(aa*g+bb+d), (-aa*d+bb*g-1), -(aa-bb*d-g), (aa*g+bb+d), (-aa*d+bb*g-1), (aa+bb*d-g), -(aa*g-bb+d), (aa*d+bb*g+1), (aa+bb*d-g), (aa*g-bb+d), -(aa*d+bb*g+1), -(aa+bb*d-g), -(aa*g-bb+d), -(aa*d+bb*g+1), -(aa+bb*d-g), (aa*g-bb+d), (aa*d+bb*g+1), -(aa*d+bb*g+1), -(aa+bb*d-g), -(aa*g-bb+d), (aa*d+bb*g+1), -(aa+bb*d-g), (aa*g-bb+d), (aa*d+bb*g+1), (aa+bb*d-g), -(aa*g-bb+d), -(aa*d+bb*g+1), (aa+bb*d-g), (aa*g-bb+d), (aa*g-bb+d), (aa*d+bb*g+1), -(aa+bb*d-g), -(aa*g-bb+d), -(aa*d+bb*g+1), -(aa+bb*d-g), (aa*g-bb+d), -(aa*d+bb*g+1), (aa+bb*d-g), -(aa*g-bb+d), (aa*d+bb*g+1), (aa+bb*d-g), ],
                [5, 7, 55, 43, 31, 19, 5, 15, 3, 51, 39, 27, 5, 52, 40, 28, 16, 4, 5, 46, 34, 22, 10, 58, 5, 9, 57, 45, 33, 21, 5, 5, 53, 41, 29, 17, 5, 2, 50, 38, 26, 14, 5, 6, 54, 42, 30, 18, 5, 47, 35, 23, 11, 59, 5, 8, 56, 44, 32, 20, 5, 12, 0, 48, 36, 24, 5, 1, 49, 37, 25, 13, 3, 7, 19, 27, 3, 19, 15, 27, 3, 7, 27, 52, 3, 52, 27, 39, 3, 4, 7, 52, 3, 31, 23, 19, 3, 40, 52, 39, 3, 58, 40, 46, 3, 58, 28, 40, 3, 9, 28, 58, 3, 9, 21, 28, 3, 21, 16, 28, 3, 21, 14, 16, 3, 14, 26, 16, 3, 26, 4, 16, 3, 46, 40, 39, 3, 51, 46, 39, 3, 34, 46, 51, 3, 51, 3, 0, 3, 58, 10, 9, 3, 12, 22, 34, 3, 12, 17, 22, 3, 24, 17, 12, 3, 5, 17, 24, 3, 54, 5, 24, 3, 6, 5, 54, 3, 17, 29, 22, 3, 22, 29, 10, 3, 33, 14, 21, 3, 2, 14, 33, 3, 49, 2, 33, 3, 1, 50, 2, 3, 1, 32, 50, 3, 5, 6, 53, 3, 24, 36, 54, 3, 36, 42, 54, 3, 36, 47, 42, 3, 47, 59, 42, 3, 42, 59, 30, 3, 59, 8, 30, 3, 8, 20, 30, 3, 20, 18, 30, 3, 20, 13, 18, 3, 13, 25, 18, 3, 32, 1, 13, 3, 2, 49, 1, 3, 44, 50, 32, 3, 4, 55, 7, 3, 26, 55, 4, 3, 38, 55, 26, 3, 38, 43, 55, 3, 38, 50, 44, 3, 32, 13, 20, 3, 38, 44, 43, 3, 44, 56, 43, 3, 56, 31, 43, 3, 8, 59, 11, 3, 11, 56, 8, 3, 11, 31, 56, 3, 11, 23, 31, 3, 23, 15, 19, 3, 23, 35, 15, 3, 35, 3, 15, 3, 35, 48, 3, 3, 48, 0, 3, 3, 47, 48, 35, 3, 47, 36, 48, 3, 0, 12, 34, 3, 0, 34, 51, 3, 10, 57, 9, 3, 10, 29, 57, 3, 29, 41, 57, 3, 41, 45, 57, 3, 41, 53, 37, 3, 49, 33, 45, 3, 45, 41, 37, 3, 37, 53, 25, 3, 25, 6, 18, 3, 25, 53, 6, 3, 49, 45, 37]
            ]
        }

        return polyhedraManager;
    };
    PolyhedraManager.version = 1;
    return PolyhedraManager;
})();
